{"version":3,"sources":["test_package.js","DummyStore.js","ParamPoly.js","packages.js"],"names":["TestPackage","text","warn","DummyStore","log","prototype","findSlideDummy","Promise","res","rej","ParamPoly","urlvar","getUrlVars","vars","window","location","href","replace","m","key","value","findMark_raw","Store","findMark","findMarkTypes_raw","findMarkTypes","getMarkByIds_raw","getMarkByIds","slide","name","specimen","study","footprint","source","x0","x1","y0","y1","image_data","dummy_mark","JSON","parse","decodeURIComponent","then","x","push","ids","includes","a"],"mappings":"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","file":"packages.map","sourceRoot":"../package","sourcesContent":["class TestPackage{\n  constructor(text){\n    console.warn(\"{sample package}\", text)\n  }\n}\n\nexport default TestPackage\n","function DummyStore(){\n  console.log(\"this has run\")\n  Store.prototype.findSlideDummy = function(){\n    return new Promise(function(res,rej){\n      res({'json': function(){\n        return [{ \"_id\" : { \"$oid\" : \"5bb6861db8bb11ffeaa05b6d\"} , \"name\" : \"CMU1\" , \"location\" : \"/images/sample.svs\" , \"mpp\" : 0.499}]\n      }})\n    })\n  }\n}\n\nexport default DummyStore\n","function ParamPoly(urlvar){\n\n  console.warn(\"{ParamPoly} Loaded\")\n  function getUrlVars() {\n    var vars = {};\n    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {\n        vars[key] = value;\n    });\n    return vars;\n  }\n  urlvar = urlvar || \"passed\"\n  // when document ready\n  // get url variable\n\n  //image_data.provenance.analysis.execution_id = \"url\"\n  Store.prototype.findMark_raw = Store.prototype.findMark\n  Store.prototype.findMarkTypes_raw = Store.prototype.findMarkTypes\n  Store.prototype.getMarkByIds_raw = Store.prototype.getMarkByIds\n  Store.prototype.findMark = function (slide, name, specimen, study, footprint, source, x0, x1, y0, y1){\n    if (!(urlvar in getUrlVars())){\n      return this.findMark_raw(slide, name, specimen, study, footprint, source, x0, x1, y0, y1)\n    } else {\n      // expecting feature collection so far\n      let image_data = JSON.parse(decodeURIComponent(getUrlVars()[urlvar]))\n      let dummy_mark = { \"_id\" : { \"$oid\" : \"000\"} , \"provenance\" : { \"image\" : { \"slide\" : \"NO\" , \"slidename\" : \"NO\"} , \"analysis\" : { \"source\" : \"url\" , \"execution_id\" : \"URLPARAM\"}} , \"geometries\" : { \"type\" : \"FeatureCollection\" , \"features\" : image_data}}\n      return this.findMark_raw(slide, name, specimen, study, footprint, source, x0, x1, y0, y1).then(x=>{\n        x.push(dummy_mark)\n        return x\n      })\n    }\n  }\n\n  Store.prototype.findMarkTypes = function(slide, name){\n    if (!(urlvar in getUrlVars())){\n      return this.findMarkTypes_raw(slide, name)\n    } else {\n      return this.findMarkTypes_raw(slide, name).then(x=>{\n        let urltype = { \"image\" : { \"slide\" : \"NO\" , \"slidename\" : \"NO\"} , \"analysis\" : { \"source\" : \"url\" , \"execution_id\" : \"URLPARAM\"}}\n        x.push(urltype)\n        return x\n      })\n    }\n  }\n\n  Store.prototype.getMarkByIds = function(ids, slide, study, specimen, source, footprint, x0, x1, y0, y1){\n    console.log(ids, slide, study, specimen, source, footprint, x0, x1, y0, y1)\n    if (ids.includes('URLPARAM')){\n      return this.getMarkByIds_raw(ids, slide, study, specimen, source, footprint, x0, x1, y0, y1).then(x=>{\n        if (!(urlvar in getUrlVars())){\n          return x\n        } else {\n          // expecting feature collection so far\n          let image_data = JSON.parse(decodeURIComponent(getUrlVars()[urlvar]))\n          let dummy_mark = { \"_id\" : { \"$oid\" : \"000\"} , \"provenance\" : { \"image\" : { \"slide\" : \"NO\" , \"slidename\" : \"NO\"} , \"analysis\" : { \"source\" : \"url\" , \"execution_id\" : \"URLPARAM\"}} , \"geometries\" : { \"type\" : \"FeatureCollection\" , \"features\" : image_data}}\n          x.push(dummy_mark)\n          console.log(x)\n          return x\n        }\n      })\n    } else {\n      return this.getMarkByIds_raw(ids, slide, study, specimen, source, footprint, x0, x1, y0, y1)\n    }\n  }\n\n}\n\nexport default ParamPoly\n","import TestPackage from './test_package.js'\nimport DummyStore from './DummyStore.js'\nimport ParamPoly from './ParamPoly.js'\n\na = new TestPackage(\"Buildy\")\nDummyStore()\nParamPoly(\"passed\")\n"]}